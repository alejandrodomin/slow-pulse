/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.apache.poi.ss.usermodel.Sheet;
import org.example.model.Complaint;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.example.factory.WorkbookFactory;
import org.example.factory.ComplaintFactory;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.nio.file.Paths;
import org.apache.poi.ss.usermodel.Workbook;

public class App {
    public static final Logger log = LoggerFactory.getLogger(App.class);
    public static final String DATASET_PATH = "app/src/main/resources/datasets.xlsx";

    public static void main(String[] args) {
        Optional<Workbook> bookOpt = WorkbookFactory.getWorkbook(Paths.get(DATASET_PATH));

        if (bookOpt.isEmpty()) {
            log.error("Could not load dataset {}", DATASET_PATH);
            Runtime.getRuntime().halt(1);
        }

        List<String> complaints = sheetStream(bookOpt.get())
                .filter(sheet -> sheet.getSheetName().contains("Complaint"))
                .peek(sheet -> log.info("Using sheet {} for complaints.", sheet.getSheetName()))
                .map(ComplaintFactory::toComplaints)
                .flatMap(List::stream)
                .map(Complaint::toString)
                .peek(log::info)
                .collect(Collectors.toList());

        log.info("All filtered complaints {}", complaints);
    }

    public static Stream<Sheet> sheetStream(Workbook book) {
        log.info("Building out sheet stream.");

        Stream.Builder<Sheet> builder = Stream.builder();
        for (int i = 0; i < book.getNumberOfSheets(); i++) {
            builder.add(book.getSheetAt(i));
        }

        return builder.build();
    }
}
